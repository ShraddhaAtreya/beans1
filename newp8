/*
 * Copyright (c) 2015, IMDEA Networks Institute
 *
 * SPDX-License-Identifier: GPL-2.0-only
 *
 * Author: Hany Assasa <hany.assasa@gmail.com>
.*
 * This is a simple example to test TCP over 802.11n (with MPDU aggregation enabled).
 *
 * Network topology:
 *
 *   Ap    STA
 *   *      *
 *   |      |
 *   n1     n2
 *
 * In this example, an HT station sends TCP packets to the access point.
 * We report the total throughput received during a window of 100ms.
 * The user can specify the application data rate and choose the variant
 * of TCP i.e. congestion control algorithm to use.
 */

#include "ns3/command-line.h"
#include "ns3/config.h"
#include "ns3/internet-stack-helper.h"
#include "ns3/ipv4-address-helper.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/log.h"
#include "ns3/mobility-helper.h"
#include "ns3/mobility-model.h"
#include "ns3/on-off-helper.h"
#include "ns3/packet-sink-helper.h"
#include "ns3/packet-sink.h"
#include "ns3/ssid.h"
#include "ns3/string.h"
#include "ns3/tcp-westwood-plus.h"
#include "ns3/yans-wifi-channel.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/flow-monitor-helper.h"

NS_LOG_COMPONENT_DEFINE("wifi-tcp");

using namespace ns3;

Ptr<PacketSink> sink;     //!< Pointer to the packet sink application
uint64_t lastTotalRx = 0; //!< The value of the last total received bytes

/**
 * Calculate the throughput
 */


int
main(int argc, char* argv[])
{
    uint32_t payloadSize{1472};           /* Transport layer payload size in bytes. */
    DataRate dataRate{"100Mb/s"};         /* Application layer datarate. */
    std::string tcpVariant{"TcpNewReno"}; /* TCP variant type. */
    std::string phyRate{"HtMcs7"};        /* Physical layer bitrate. */
    //Time simulationTime{"10s"};           /* Simulation time. */
    bool pcapTracing{false};              /* PCAP Tracing is enabled or not. */
 
    double simulationTime = 10; // seconds
    
    /* Command line argument parser setup. */
    CommandLine cmd(__FILE__);
    cmd.AddValue("payloadSize", "Payload size in bytes", payloadSize);
    cmd.AddValue("dataRate", "Application data ate", dataRate);
    cmd.AddValue("tcpVariant",
                 "Transport protocol to use: TcpNewReno, "
                 "TcpHybla, TcpHighSpeed, TcpHtcp, TcpVegas, TcpScalable, TcpVeno, "
                 "TcpBic, TcpYeah, TcpIllinois, TcpWestwood, TcpWestwoodPlus, TcpLedbat ",
                 tcpVariant);
    cmd.AddValue("phyRate", "Physical layer bitrate", phyRate);
    cmd.AddValue("simulationTime", "Simulation time in seconds", simulationTime);
    cmd.AddValue("pcap", "Enable/disable PCAP Tracing", pcapTracing);
    cmd.Parse(argc, argv);

    tcpVariant = std::string("ns3::") + tcpVariant;
    // Select TCP variant
    TypeId tcpTid;
    NS_ABORT_MSG_UNLESS(TypeId::LookupByNameFailSafe(tcpVariant, &tcpTid),
                        "TypeId " << tcpVariant << " not found");
    Config::SetDefault("ns3::TcpL4Protocol::SocketType",
                       TypeIdValue(TypeId::LookupByName(tcpVariant)));

    /* Configure TCP Options */
    Config::SetDefault("ns3::TcpSocket::SegmentSize", UintegerValue(payloadSize));

    WifiMacHelper wifiMac;
    WifiHelper wifiHelper;
    wifiHelper.SetStandard(WIFI_STANDARD_80211n);

    /* Set up Legacy Channel */
    YansWifiChannelHelper wifiChannel;
    wifiChannel.SetPropagationDelay("ns3::ConstantSpeedPropagationDelayModel");
    wifiChannel.AddPropagationLoss("ns3::FriisPropagationLossModel", "Frequency", DoubleValue(5e9));

    /* Setup Physical Layer */
    YansWifiPhyHelper wifiPhy;
    wifiPhy.SetChannel(wifiChannel.Create());
    wifiPhy.SetErrorRateModel("ns3::YansErrorRateModel");
    wifiHelper.SetRemoteStationManager("ns3::ConstantRateWifiManager",
                                       "DataMode",
                                       StringValue(phyRate),
                                       "ControlMode",
                                       StringValue("HtMcs0"));

    NodeContainer networkNodes;
    networkNodes.Create(13);
    Ptr<Node> apWifiNode = networkNodes.Get(0);
    Ptr<Node> staWifiNode1 = networkNodes.Get(1); //change here
    Ptr<Node> staWifiNode2 = networkNodes.Get(2);
    Ptr<Node> staWifiNode3 = networkNodes.Get(3);
    Ptr<Node> staWifiNode4 = networkNodes.Get(4);
    Ptr<Node> staWifiNode5 = networkNodes.Get(5);
    Ptr<Node> staWifiNode6 = networkNodes.Get(6);
    Ptr<Node> staWifiNode7 = networkNodes.Get(7);
    Ptr<Node> staWifiNode8 = networkNodes.Get(8);
    Ptr<Node> staWifiNode9 = networkNodes.Get(9);
    Ptr<Node> staWifiNode10 = networkNodes.Get(10);
    Ptr<Node> staWifiNode11 = networkNodes.Get(11);
   Ptr<Node> staWifiNode12 = networkNodes.Get(12);

    /* Configure AP */
    Ssid ssid = Ssid("network");
    wifiMac.SetType("ns3::ApWifiMac", "Ssid", SsidValue(ssid));

    NetDeviceContainer apDevice;
    apDevice = wifiHelper.Install(wifiPhy, wifiMac, apWifiNode);

    /* Configure STA */
    wifiMac.SetType("ns3::StaWifiMac", "Ssid", SsidValue(ssid));

    
    NetDeviceContainer staDevices;
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode1));  //change this format, replace = by .Add
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode2));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode3));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode4));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode5));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode6));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode7));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode8));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode9));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode10));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode11));
    staDevices.Add(wifiHelper.Install(wifiPhy, wifiMac, staWifiNode12));

    /* Mobility model */
     MobilityHelper mobility;
    Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator>();
    positionAlloc->Add(Vector(0.0, 0.0, 0.0));
    positionAlloc->Add(Vector(1.0, 1.0, 0.0)); //add here
    positionAlloc->Add(Vector(2.0, 2.0, 0.0));
    positionAlloc->Add(Vector(3.0, 3.0, 0.0));
    positionAlloc->Add(Vector(4.0, 4.0, 0.0));
    positionAlloc->Add(Vector(5.0, 5.0, 0.0));
    positionAlloc->Add(Vector(6.0, 6.0, 0.0));
    positionAlloc->Add(Vector(7.0, 7.0, 0.0));
    positionAlloc->Add(Vector(8.0, 8.0, 0.0));
    positionAlloc->Add(Vector(9.0, 9.0, 0.0));
    positionAlloc->Add(Vector(10.0, 10.0, 0.0));
    positionAlloc->Add(Vector(11.0, 11.0, 0.0));
    positionAlloc->Add(Vector(12.0, 12.0, 0.0));
     mobility.SetPositionAllocator(positionAlloc);
    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobility.Install(apWifiNode);
    mobility.Install(staWifiNode1);
    mobility.Install(staWifiNode2);
    mobility.Install(staWifiNode3);
    mobility.Install(staWifiNode4);
    mobility.Install(staWifiNode5);
    mobility.Install(staWifiNode6);
    mobility.Install(staWifiNode7);
    mobility.Install(staWifiNode8);
    mobility.Install(staWifiNode9);
    mobility.Install(staWifiNode10);
    mobility.Install(staWifiNode11);
    mobility.Install(staWifiNode12);


    /* Internet stack */
    InternetStackHelper stack;
    stack.Install(networkNodes);

    Ipv4AddressHelper address;
    address.SetBase("10.0.0.0", "255.255.255.0");
    Ipv4InterfaceContainer apInterface;
    apInterface = address.Assign(apDevice);
    Ipv4InterfaceContainer staInterface;
    staInterface = address.Assign(staDevices);

    /* Populate routing table */
    Ipv4GlobalRoutingHelper::PopulateRoutingTables();

    /* Install TCP Receiver on the access point */
    PacketSinkHelper sinkHelper("ns3::TcpSocketFactory",
                                InetSocketAddress(Ipv4Address::GetAny(), 9));
    ApplicationContainer sinkApp = sinkHelper.Install(apWifiNode);
    sink = StaticCast<PacketSink>(sinkApp.Get(0));

    /* Install TCP/UDP Transmitter on the station */
    OnOffHelper server("ns3::TcpSocketFactory", (InetSocketAddress(staInterface.GetAddress(0), 9)));
    server.SetAttribute("PacketSize", UintegerValue(payloadSize));
    server.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=1]"));
    server.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));
    server.SetAttribute("DataRate", DataRateValue(DataRate(dataRate)));
    ApplicationContainer serverApp = server.Install(staWifiNode3);

    /* Start Applications */
    sinkApp.Start(Seconds(0.0));
    serverApp.Start(Seconds(1.0));
    
    sinkApp.Stop(Seconds(simulationTime+1));
    serverApp.Start(Seconds(simulationTime));
    
    //Simulator::Schedule(Seconds(1.1), &CalculateThroughput);

    /* Enable Traces */
    if (pcapTracing)
    {
        wifiPhy.SetPcapDataLinkType(WifiPhyHelper::DLT_IEEE802_11_RADIO);
        wifiPhy.EnablePcap("AccessPoint", apDevice);
        wifiPhy.EnablePcap("Station", staDevices);
    }
    FlowMonitorHelper flowmon;
    Ptr<FlowMonitor> monitor = flowmon.InstallAll();

    Simulator::Stop(Seconds(simulationTime + 5));
    Simulator::Run();

    Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowmon.GetClassifier());
    std::map<FlowId, FlowMonitor::FlowStats> stats = monitor->GetFlowStats();
   
     for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator iter = stats.begin (); iter != stats.end (); ++iter)
    {
      Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (iter->first);
      std::cout << "Flow ID: " << iter->first << " Src Addr " << t.sourceAddress << " Dst Addr " << t.destinationAddress<< std::endl;
      std::cout << "Tx Packets   = " << iter->second.txPackets<< std::endl;
      std::cout << "Rx Packets   = " << iter->second.rxPackets<< std::endl;
      std::cout << "Lost Packets = " << iter->second.lostPackets<< std::endl;
      std::cout << "Throughput   = " << iter->second.rxBytes * 8.0 / (iter->second.timeLastRxPacket.GetSeconds()-iter->second.timeFirstTxPacket.GetSeconds()) / 1000000  << " Kbps"<< std::endl;
    }

    Simulator::Destroy();

   
    return 0;
}

